import { Meta, StoryFn } from "@storybook/html";
import { IconButton, IconButtonProps } from ".";
import { Box } from "../Box";
import { IconSettings } from "../Icon/iconSettings";

export default {
  /* üëá The title prop is optional.
   * See https://storybook.js.org/docs/html/configure/overview#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: "UI/Buttons/IconButton",
  parameters: {
    docs: {
      description: {
        component:
          "IconButton –ø–æ–º–æ–≥–∞—é—Ç –ª—é–¥—è–º –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –æ–¥–Ω–∏–º –Ω–∞–∂–∞—Ç–∏–µ–º.<br/><br/>[–°—Å—ã–ª–∫–∞ –Ω–∞ Material You](https://m3.material.io/components/icon-buttons/overview)",
      },
    },
  },
  argTypes: {
    variant: {
      name: "variant",
      type: "string",
      description: "–í–∞—Ä–∏–∞–Ω—Ç",
      defaultValue: "filled",
      control: {
        type: "select",
        options: ["filled", "outlined", "tonal", "standard"],
      },
    },
    color: {
      name: "color",
      type: "string",
      description: "–¶–≤–µ—Ç",
      defaultValue: "primary",
      control: {
        type: "select",
        options: [
          "primary",
          "secondary",
          "tertiary",
          "success",
          "warning",
          "error",
        ],
      },
    },
    selected: {
      name: "selected",
      type: "boolean",
      description: "–í—ã–±—Ä–∞–Ω?",
      defaultValue: false,
    },
    loading: {
      name: "loading",
      type: "boolean",
      description: "–°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏?",
      defaultValue: false,
    },
    disabled: {
      name: "disabled",
      type: "boolean",
      description: "–í—ã–∫–ª—é—á–µ–Ω?",
      defaultValue: false,
    },
    as: {
      name: "as",
      type: "string",
      description: "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Ä–µ–Ω–µ–¥–µ—Ä–∏–Ω–≥–∞",
      defaultValue: "button",
    },
    children: {
      name: "children",
      type: "string",
      description: "–î–æ—á–µ—Ä–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç-–∏–∫–æ–Ω–∫–∞",
    },
    m: {
      name: "m",
      type: "number",
      description: "–í–Ω–µ—à–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã –≤ –ø–∏–∫—Å–µ–ª—è—Ö",
    },
    mx: {
      name: "mx",
      type: "number",
      description: "–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –≤–Ω–µ—à–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã –≤ –ø–∏–∫—Å–µ–ª—è—Ö",
    },
    my: {
      name: "my",
      type: "number",
      description: "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –≤–Ω–µ—à–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã –≤ –ø–∏–∫—Å–µ–ª—è—Ö",
    },
    mt: {
      name: "mt",
      type: "number",
      description: "–í–µ—Ä—Ö–Ω–∏–π –≤–Ω–µ—à–Ω–∏–π –æ—Ç—Å—Ç—É–ø –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö",
    },
    mr: {
      name: "mr",
      type: "number",
      description: "–ü—Ä–∞–≤—ã–π –≤–Ω–µ—à–Ω–∏–π –æ—Ç—Å—Ç—É–ø –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö",
    },
    mb: {
      name: "mb",
      type: "number",
      description: "–ù–∏–∂–Ω–∏–π –≤–Ω–µ—à–Ω–∏–π –æ—Ç—Å—Ç—É–ø –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö",
    },
    ml: {
      name: "ml",
      type: "number",
      description: "–õ–µ–≤—ã–π –≤–Ω–µ—à–Ω–∏–π –æ—Ç—Å—Ç—É–ø –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö",
    },
  },
} as Meta<IconButtonProps>;

const Template = ((args: IconButtonProps) => (
  <IconButton {...args}>
    <IconSettings />
  </IconButton>
)) as StoryFn<IconButtonProps>;

export const Default = Template.bind({});
Default.args = {} as IconButtonProps;

const TemplateAllColors = ((args: IconButtonProps) => (
  <Box style={{ display: "flex" }}>
    <IconButton {...args} mx={4} color="primary">
      <IconSettings />
    </IconButton>
    <IconButton {...args} mx={4} color="secondary">
      <IconSettings />
    </IconButton>
    <IconButton {...args} mx={4} color="tertiary">
      <IconSettings />
    </IconButton>
    <IconButton {...args} mx={4} color="success">
      <IconSettings />
    </IconButton>
    <IconButton {...args} mx={4} color="warning">
      <IconSettings />
    </IconButton>
    <IconButton {...args} mx={4} color="error">
      <IconSettings />
    </IconButton>
  </Box>
)) as StoryFn<IconButtonProps>;

export const AllColors = TemplateAllColors.bind({});
AllColors.args = {} as IconButtonProps;
