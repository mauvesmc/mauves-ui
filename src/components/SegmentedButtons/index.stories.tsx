import { Meta, StoryFn } from "@storybook/html";
import { createSignal } from "solid-js";
import { SegmentedButtons, SegmentedButtonsProps } from ".";
import { IconCircle } from "../Icon/iconCircle";

export default {
  /* üëá The title prop is optional.
   * See https://storybook.js.org/docs/html/configure/overview#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: "UI/Buttons/SegmentedButtons",
  parameters: {
    docs: {
      description: {
        component:
          "–°–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ–≥–∞—é—Ç –ª—é–¥—è–º –≤—ã–±–∏—Ä–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã.<br/><br/>[–°—Å—ã–ª–∫–∞ –Ω–∞ Material You](https://m3.material.io/components/segmented-buttons/overview)",
      },
    },
  },
  argTypes: {
    color: {
      name: "color",
      type: "string",
      description: "–¶–≤–µ—Ç",
      defaultValue: "primary",
      control: {
        type: "select",
        options: [
          "primary",
          "secondary",
          "tertiary",
          "success",
          "warning",
          "error",
        ],
      },
    },
    density: {
      name: "density",
      type: "number",
      description: "–°—Ç—Ä–æ–π–Ω–æ—Å—Ç—å",
      defaultValue: 0,
      control: {
        type: "select",
        options: [0, -1, -2, -3],
      },
    },
    as: {
      name: "as",
      type: "string",
      description: "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Ä–µ–Ω–µ–¥–µ—Ä–∏–Ω–≥–∞",
      defaultValue: "div",
    },
    children: {
      name: "children",
      type: "string",
      description: "–î–æ—á–µ—Ä–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç",
    },
    m: {
      name: "m",
      type: "number",
      description: "–í–Ω–µ—à–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã –≤ –ø–∏–∫—Å–µ–ª—è—Ö",
    },
    mx: {
      name: "mx",
      type: "number",
      description: "–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –≤–Ω–µ—à–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã –≤ –ø–∏–∫—Å–µ–ª—è—Ö",
    },
    my: {
      name: "my",
      type: "number",
      description: "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –≤–Ω–µ—à–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã –≤ –ø–∏–∫—Å–µ–ª—è—Ö",
    },
    mt: {
      name: "mt",
      type: "number",
      description: "–í–µ—Ä—Ö–Ω–∏–π –≤–Ω–µ—à–Ω–∏–π –æ—Ç—Å—Ç—É–ø –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö",
    },
    mr: {
      name: "mr",
      type: "number",
      description: "–ü—Ä–∞–≤—ã–π –≤–Ω–µ—à–Ω–∏–π –æ—Ç—Å—Ç—É–ø –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö",
    },
    mb: {
      name: "mb",
      type: "number",
      description: "–ù–∏–∂–Ω–∏–π –≤–Ω–µ—à–Ω–∏–π –æ—Ç—Å—Ç—É–ø –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö",
    },
    ml: {
      name: "ml",
      type: "number",
      description: "–õ–µ–≤—ã–π –≤–Ω–µ—à–Ω–∏–π –æ—Ç—Å—Ç—É–ø –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö",
    },
  },
} as Meta<SegmentedButtonsProps>;

const Template = ((args: SegmentedButtonsProps) => {
  const [selected, setSelected] = createSignal<string[]>([]);

  const toggle = (item: string) => {
    setSelected((p) =>
      p.includes(item) ? p.filter((v) => v !== item) : [...p, item]
    );
  };

  return (
    <SegmentedButtons {...args}>
      <SegmentedButtons.Button
        icon={<IconCircle />}
        selected={selected().includes("e1")}
        onClick={() => toggle("e1")}
      >
        –ö–Ω–æ–ø–∫–∞
      </SegmentedButtons.Button>
      <SegmentedButtons.Button
        icon={<IconCircle />}
        selected={selected().includes("e2")}
        disabled
        onClick={() => toggle("e2")}
      >
        –ö–Ω–æ–ø–∫–∞
      </SegmentedButtons.Button>
      <SegmentedButtons.Button
        icon={<IconCircle />}
        selected={selected().includes("e3")}
        onClick={() => toggle("e3")}
      >
        –ö–Ω–æ–ø–∫–∞
      </SegmentedButtons.Button>
      <SegmentedButtons.Button
        icon={<IconCircle />}
        selected={selected().includes("e4")}
        onClick={() => toggle("e4")}
      >
        –û—á–µ–Ω—å –±–æ–ª—å—à–∞—è –∫–Ω–æ–ø–∫–∞
      </SegmentedButtons.Button>
    </SegmentedButtons>
  );
}) as StoryFn<SegmentedButtonsProps>;

export const Default = Template.bind({});
Default.args = {} as SegmentedButtonsProps;
